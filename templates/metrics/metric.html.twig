{% extends "base.html.twig" %}

{% block title %}Metrics{% endblock %}

{% block body %}
    <header>
        <h1>Metrics analys</h1>
    </header>

    <h2>Introduktion</h2>
    <p class="text-block">För att förbättra kodkvaliteten kan vi använda oss av flera metoder. De sex C:na om kodkvalitet (6C) representerar sex steg mot snyggare och ren kod.
    Dessa består av Codestyle (Kodstil), Coverage (Täckning), Complexity (Komplexitet), Cohesion (Sammanhållning), Coupling (Koppling) och CRAP (Change Risk Anti-Patterns Score).<p>

    <p class="text-block"><b>Codestyle</b> avser riktlinjer för hur en kod bör ser ut, inklusive namngivning och strukturering. En förbättrad kodstil påverkar kodkvaliteten genom att indentifiera fel snabbare och kan minska arbetet med kodbasen.
    Till exmepel kan regelbunden användning av kamelnotation och tydliga namn bidra till att koden blir mer läsbar.
    Mätvärden som "Comment lines of code" anger antalet rader med kommenater. Ett högt antal kan indikera väl kommenterad kod.
    Dessutom är "Average comment weigh" en indikator på hur välkategoriserade kommentarerna är.
    Vi som programmerare vill kunna skriva kod som andra programmerare kan läsa, förstå och undehålla för ett bättre samarbete.<p>

    <p class="text-block"><b>Coverage</b> även kallad "Kodtäckning", visar hur mycket av kodbasen som är testad via enhetstester.
    Det finns hög och låg täckning. Högre täckning leder oftast till färre buggar eftersom det är mer kod som testas.
    Kodtäckning kan mätas genom antaletet enhetstester "Number of unit test".
    Högre täckning är vikitgt och ligger mellan 70% och 100% täckning, men det är också vikitgt att fokusera på meningsfulla tester än att sträva efter 100% täckning.<p>

    <p class="text-block"><b>Complexity</b> mäter hur komplicerad koden är, vilket påverkar hur svår är koden att förstå, underhålla och ändra.
    Vi mäter hur komplex koden är med "Average Difficulty" som visar medelsvårigheten att förstå, samt "Average Weighted method count by class", som mäter metodantalet per klass.
    Ett bra mätvärde för medelsvårigheten är 0-10, vilket indikerar låg komplexitet och enkel kod att förstå.
    Mäta komplexiteten av metoderna i en klass har ett bra mätvärde på 8-10, vilket är bra för underhållbarheten.
    Det är vikitgt att mäta och hantera kodens komplexitet för kunna utveckla kodkvaliteten, underhållbarheten och minska risken för fel.<p>

    <p class="text-block"><b>Cohesion</b> refererar till hur relaterade och fokuserade varje enskild modul eller komponent är.
    Hög sammanhållning bidrar till att moduler eller komponenter utför specifika funktioner bättre och blir lättare att förstå, testa och modifiera.
    Ett mått på hur mycket metoderna hör ihop "Lack of cohesion of methods" bör vara lågt värde för högre sammanhållning.<p>

    <p class="text-block"><b>Coupling</b> definiterar hur beroende moduler eller komponenter är av varandra. Det finns både hög och låg koppling.
    Mätning på genomsnittligt antal inkommande beroeden per plass är "Average afferent coupling" och "Average instability" som mäter hur instabil en klass är.
    Låg koppling innebär att förändringar i en modul eller komponent medför en mindre risk för att behöva ändra i en annan.<p>

    <p class="text-block"><b>CRAP</b> används för att bedöma risker för kodförändringar baserat på kodens täckning och Komplexitet.
    För att mäta risken för kodförändringar används "Average Cyclomatic complexity by class" tillsammans med kodtäckning för att beräkna CRAP Score.
    Ett högt värde indikerar på hög risk, antingen på grund av koden är dåligt testad eller komplex.
    Lågt Crap Score innebär att koden är väl testad eller inte komplex, vilket bidrar till en minskad risken vid kodförändringar.
    CRAP är ett verktyg som hjälper oss utvecklare att hitta delar av kod som kan behöva en förbättring för att minska risken för framtida ändringar.<p>

    <p class="text-block"><b>Mitt resultat</b> <ul class="text-block">
    <li>Comment lines of code mätvärde: 374</li>
    <li>Average comment weigh mätvärde: 24.5%</li>
    <li>Number of unit test: 6</li>
    <li>Average Difficulty: 5.37</li>
    <li>Average Weighted method count by class: 7.08</li>
    <li>Lack of cohesion of methods: 1.65</li>
    <li>Average afferent coupling: 0.88</li>
    <li>Average instability: 0.63</li>
    <li>Average Cyclomatic complexity by class: 3.73</li>
</ul>
<p>


    <h2>Phpmetrics</h2>
   <p class="text-block">Phpmetrics visualiserar mätvärden som anger och indikera en viss nivå av kvalitet på koden.
   Mätvärderna blir analyserade för att hitta flaskhalsar och svaga punkter, med förbättringspotential i koden.</p>

   <p class="text-block">För att analysera och hitta flaskhalsar och svaga punkter i koden, behöver vi veta först vad det är för något.
   Flaskhalsar och svaga punkter i kod är områden som kan orsaka problem med underhållbarhet och prestanda. Vi vill åtgärda detta för att
   hålla en hög kvalitet på koden och undvika framtida problem.</p>

   <p class="text-block"><b>Flaskhalsar och svaga punkter</b> Exempel på klassser med hög komplexitet som hittades: 
<ul class="text-block">
    <li>App\Game\Player Cyclomatic complexity: 5 Maintainability Index: 84.77 50.74</li>
    <li>App\controller\Biblotekcontroller: Cyclomatic complexity: 9 Maintainability Index: 63.81 </li>
    <li>App\Game\BlackJackGame: Cyclomatic complexity: 8 Maintainability Index: 78.3</li>
</ul>
   <p class="text-block">Dessa filer har en relativt hög komplexitet, och gula eller röda cirklar indikerar att de är medel eller svåra att underhålla.<p>
        <img src="{{ asset('build/images/metrics.png') }}" alt="metric" width=500" height="auto">

   <p class="text-block"><b>App\Game\Player:</b> Med en komplexitet på 5 är koden relativt komplex och underhållbarhet har ett värde på 84.77 indikerar att klassen är ganska lätt att underhålla.
   <p class="text-block"><b>Förbättringspotential:</b> Förbättringar kan göras genom att bryta ner klassen i mindre, mer hanterbara delar, förbättra dokumentationen och se till att det finns tester för alla funktioner.<p>

    <p class="text-block"><b> App\Controller\BiblotekController:</b> Innhåller ett högre värde på 9 och gör klassen mycket komplex. underhållbarheten har ett värde på 63.81 vilket är ett medelvärde, vilket gör klassen svårare att underhålla.
    <p class="text-block"><b>Förbättringspotential:</b> För att minska klassens komplexitet, kan det utföras genom att bryta ut delar av koden till seperata metoder eller klasser.
    Dessutom en förbättrad dokumentation med kommenater och se över att det finns tester för alla funktioner i klassen.<p>

    <p class="text-block"><b> App\Game\BlackJackGame:</b> Med ett värde på 8 är denna klass mycket komplex. Dessutom ett värde på 78.3 för underhållbarhet är det acceptabelt men det finns förbättringspotential.
    <p class="text-block"><b>Förbättringspotential:</b> Dela upp de stora metoder i mindre för att minska komplexiteten. Samt att förbättra och se att det finns enhetstester för att öka underhållbarheten.<p>


    <h2>Scrutinizer</h2>
    <p class="text-block"> Analysera koden på ett liknande sätt som Phpmetrics. Scrutinizer är ett vektyg som analyserar kodkvalitet och hittar förbättringsområden.
    Med Scrutinizer hittar vi information om kodens kvalitet, täckning och byggstatus.<p>

    <h3>Scrutinizer Badgets</h3>
<a href="https://scrutinizer-ci.com/g/jacobLandefjall/mvc/?branch=main">
    <img src="https://scrutinizer-ci.com/g/jacobLandefjall/mvc/badges/quality-score.png?b=main" alt="kodkvalitet">
</a>
<a href="https://scrutinizer-ci.com/g/jacobLandefjall/mvc/?branch=main">
    <img src="https://scrutinizer-ci.com/g/jacobLandefjall/mvc/badges/coverage.png?b=main" alt="Kodtäckning">
</a>
<a href="https://scrutinizer-ci.com/g/jacobLandefjall/mvc/?branch=main">
    <img src="https://scrutinizer-ci.com/g/jacobLandefjall/mvc/badges/build.png?b=main" alt="byggstatus">
</a>
        <p class="text-block"><b>Scrutinizer:</b> Visar kodkvaliteten baserat på Scrutinizers analys och gav resultatet 10, vilket är en bra kodkvalitet.</p>
        <p class="text-block"><b>Code Coverage:</b> Analyserar kodtäckningen. Täckningen blev endast 15% vilket bör förbättras.</p>
        <p class="text-block"><b>Build Status:</b> Indikerar om byggningen av projektet lyckades eller misslyckades, projektetet lyckades.<p>

        <p class="text-block"><b>App\controller\Biblotekcontroller:</b> Oanvänd kod hittades.
         <p class="text-block"><b>Förbättringspotential:</b> Förbättringar kan göras genom att ta bort oanvänd kod för att att förbättra läsbarheten och minska komplexitet.</p>

        <p class="text-block"><b>App\Game\Player:</b> Två fel hittades, "Bug" och "Best Practice". 
         <p class="text-block"><b>Förbättringspotential:</b> Genom att åtgärda buggarna och utöka koden med enhetstester ser till att koden fungerar korrekt.</p>

        <p class="text-block"><b>App\Game\Deck:</b> Oanvänd kod hittades. 
         <p class="text-block"><b>Förbättringspotential:</b> Genom att ta bort oanvänd kod förbättras kodens underhållbarhet och struktur.</p>

    <h3>Koppling till 6C</h3>
    <p class="text-block"> Våra "findings" från Phpmetrics och Scrutinizer kan användas av de sex C:na (6C) för att analysera kodkvalitet och förbättra koden.</p>

    <p class="text-block"><b>Codestyle</b> <ul class="text-block">
    <li>Använd mätvärden för åtgärda buggar, välkategoriserade kommentarer, namngivning och strukturering.</li>
</ul>
<p>
    <p class="text-block"><b>Complexity</b> <ul class="text-block">
    <li>Minska komplexitet genom att bryta ner större klasser och metoder till mindre.</li>
    <li>Se över mätvärden för att hitta kod med hög komplexitet.</li>

</ul>
<p>
    <p class="text-block"><b>Coverage</b> <ul class="text-block">
    <li>Öka kodtäckningen med fler enhetstester.</li>
    <li>Säkerställ att testerna täcker stora delar av koden och minskar risken för problem.</li>
</ul>
<p>
    <p class="text-block"><b>Cohesion</b> <ul class="text-block">
    <li>Mätvärden visar hur sammanhängande klasser och metoder är i sin funktionalitet.</li>
</ul>
<p>
    <p class="text-block"><b>Coupling</b> <ul class="text-block">
    <li> Mått på hur beroende klasser och moduler är av varandra och om risk finns att behöva göra ändringar i en annan modul eller komponent.</li>
</ul>
<p>
    <p class="text-block"><b>CRAP</b> <ul class="text-block">
    <li>CRAP Score bör ha ett lägre mätvärde för att minimera risken för buggar och problem vid ändringar. </li>
</ul>
    <p class="text-block">Med hjälp av mätvärdena och se över de sex C:na underlättas analysen av kodkvalitet och indentifiera problem med förbättringspotential.<p>

    <h2>Förbättringar</h2>
        <p class="text-block">Med hjälp av mätvärdena som har hittat flaskhalsar och svaga punkter i min kod, ska koden förbättras genom ökad kodtäckning, minskad komplexitet, ta bort oanvänd kod och allmänt förbättra kodkvaliteten.
        Jag kommer att förbättra de tre exempel vi använde oss av i början av analysen "App\Game\Player", "App\Controller\BiblotekController" och "App\Game\BlackJackGame".
        Dessa valdes eftersom jag redan har identifierat deras förbättringspotential. Efter förbättringen kommer mätvärderna att vara bättre, med metoder som uppdelade i mindre delar, utökad enhetstester och borttagen oanvänd kod.<p>

    <h3>Resultat</h3>

       <p class="text-block"><b>App\Game\Player:</b> Klassen utökade bäst av alla. bortagen oanvänd kod, förbättrade enhetstesterna för att Säkerställa att koden fungera korrekt,
       bröt ut stora moduler till mindre delar för att minska komplexiteten och förbättrade enhetstesterna för en minskad komplexitet.</p>

        <p class="text-block"><b>App\Game\BlackJackGame:</b>klassen innehöll minst antal flaskhalsar och svaga punkter.
        De stora metoderna delades in till mindre för en minskad komplexitet och utökade enhetstesterna för en ökad underhållbarhet.</p>

        <p class="text-block"><b>App\Controller\BiblotekController:</b> Kontrollen innehåll fler flaskhalsar och svaga punkter, dels pågrund av den större mängd kod.
        Oanvänd kod togs bort, dokumentationen förbättrades för en bättre läsbarhet och utökade med enhetstester för att säkerställa att alla funktioner testas.<p>

         <img src="{{ asset('build/images/metrics2.png') }}" alt="metric" width=500" height="auto">

         <h4>Jämförelse</h4>

<ul class="text-block">
    <li><b>App\Game\Player Före:</b> Cyclomatic complexity: 5 Maintainability Index: 84.77 </li>
    <p><p>
    <li><b>App\Game\Player Efter:</b> Cyclomatic complexity: 6 Maintainability Index: 85.11</li>
    <p><p>
    <li><b>App\controller\Biblotekcontroller Före:</b> Cyclomatic complexity: 9 Maintainability Index: 63.81 </li>
        <p><p>
    <li><b>App\controller\Biblotekcontroller Efter:</b> Cyclomatic complexity: 7 Maintainability Index: 76.25</li>
        <p><p>
    <li><b>App\Game\BlackJackGame Före:</b> Cyclomatic complexity: 8 Maintainability Index: 78.3</li>
        <p></p>
    <li><b>App\Game\BlackJackGame Efter:</b> Cyclomatic complexity: 9 Maintainability Index: 80.33</li>

    <h2>Diskussion</h2>
    <p class="text-block">Sträva efter en bra kodkvalitet har många fördelar. "Clean Code" och 6C har visats bidra med många fördelar för att uppnå en bättre kodkvalitet.
    Kod som är ren och välstrukturerad blir lättare att läsa och förstå, vilket underlättar för andra utvecklare och för sig själv.
    "Clean Code" gör et lättare att undehålla och uppdatera kod, vilket minskar tid för förändringar och bugfixar.
    Bryta ut större kod till mindre delar främjar en förbättrad komplexitet och koden blir då lättare att testa och mindre risk att innehålla buggar.
    Dessutom bidrar "clean code" med bättre testbarhet, detta gör det lättare att enhetstesta och förbättrad därmed enhetstesterna.<p>

    <p class="text-block">Med många fördekar mot en bra kodkvalitet medkommer nackdelar. För att främja en god underhållbarhet och mindre komplex kod, krävs det mer tid
    att åstadkomma dessa fördelar. Inför vissa inlämningsdatum eller deadlines blir der svårare att leverara i tid. Att jobba aktivt med kodkvalitet kan innebära högre krav på erfarenhet. Skriva ren kod anser jag inte vara så nybörjarvänligt,
    det kräver kunskap och erfarenhet, vilket kan vara en utmaning för nya utvecklare.<p>

    <p class="text-block">Utöver dessa fördelar och nackdelar finns fler möjligheter med "clean code". Men hjälp av Phpmetrics och Scrutinizer
    blir det lättare att regelbundet se över koden för att rätta till problem. Kodgranskningar tillåter att fler kan se över koden för att bidra till Förbättringar.
    Att införa "clean code" som kodstandard för alla utveckla i sitt team, säkerställer att gemensam kod och mål mot en bra kodkvalitet.
    Dessutom kan det bidra till fler gemensamma utbildningar för ren kod. Inom teamet delas kunskap och erfarenhetet.</p>

    <p class="text-block"> Genom att tilläga dessa möjligheter kan man skapa en arbetsmiljö som strävar efter bra kodkvalitet och ren kod, 
    vilket ger en förbättrad hållbarhet och underhållbar kod.<p>



    





{% endblock %}